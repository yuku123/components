package com.zifang.util.monitor.jvm.ref;

/**
 * 强引用：JVM不会回收此对象
 * 概述 Java.lang.ref 是 Java 类库中比较特殊的一个包，它提供了与 Java
 * 垃圾回收器密切相关的引用类。这些引用类对象可以指向其它对象，但它们不同于一般的引用，因为它们的存在并不防碍 Java
 * 垃圾回收器对它们所指向的对象进行回收。其好处就在于使者可以保持对使用对象的引用，同时 JVM
 * 依然可以在内存不够用的时候对使用对象进行回收。因此这个包在用来实现与缓存相关的应用时特别有用
 * 。同时该包也提供了在对象的“可达”性发生改变时，进行提醒的机制。
 * 本文通过对该包进行由浅入深的介绍与分析，使读者可以加深对该包的理解，从而更好地利用该包进行开发。
 * 
 *
 *
 */
public class StrongReferenceDemo {

	/**
	 * 我们都知道 JVM 中对象是被分配在堆（heap）上的，当程序行动中不再有引用指向这个对象时，这个对象就可以被垃圾回收器所回收。
	 * 这里所说的引用也就是我们一般意义上申明的对象类型的变量（如 String, Object, ArrayList 等），区别于原始数据类型的变量（如
	 * int, short, long 等）也称为强引用。
	 * 
	 * @param args
	 */
	public static void main(String[] args) {

		/**
		 * 此处的 tag 引用就称之为强引用。
		 * 而强引用有以下特征： 
		 * 	强引用可以直接访问目标对象。 
		 * 	强引用所指向的对象在任何时候都不会被系统回收。
		 * 	强引用可能导致内存泄漏。
		 * 我们要讨论的这三种 Reference较之于强引用而言都属于“弱引用”，也就是他们所引用的对象只要没有强引用，就会根据条件被 JVM
		 * 的垃圾回收器所回收，它们被回收的时机以及用法各不相同。下面分别来进行讨论。 
		 */
		String tag = "T";
	}
}
